- On profite des avantages de la logique de séparation :
  -- Spécification du programme similaire au programme
  -- Le lien entre la spec et le programme se fait en parcourant une seule fois le programme (style Hoare)
    --- La preuve est de la même forme que le programme :
       ---- Preuve lisible (script)
       ---- facilement automatisable (la construction d'une tactique est assez facile)
  -- Manipulation de la heap implicite
    --- Spec plus lisible/épuré
    --- Beaucoup de petits lemmes deviennent obselètes car ils font partie de la définition de la logique de séparation

- On profite des avantages de MoSel :
  -- Les tactiques de MoSel sont proches de celle de Coq et la manipulation de la logique de séparation se fait très bien. (Facile à prendre en main, pas de manipulation supplémentaire)
  -- Possibilité d'automatiser les morceaux de preuve dans proofmode ? La plupart se termine dans le proofmode et ces parties sont assez similaires. Il est possible que ce soit récurrent.
     Voir la création de tactiques manipulant l'environnement spatial, je ne sais pas encore le faire.

- Désavantages :
  -- Comprendre comment éviter que la notation du triplet se retire avec un "simpl" (passer par une définition puis une notation ?)
  -- Pas de structures "Inductive" : Pourrait-être compenser si la manipulation du contexte spatial avec des tactiques est facile ?
     En effet, "inversion" sur un inductive évite une grosse quantité de destruct. (Je crois que apply_ind le compense bien)
  -- Locally : la preuve de tr_expr_invariant est beaucoup plus lourde que l'ancienne. Même si la manipulation du contexte spatial la simplifie, elle n'est pas aussi courte.
  -- Preuve de nolabel_expr : un peu plus longue. Possibilité de créer un équivalent à NoLabelTac pour que la preuve soit plus automatisé.
  -- Tactiques beaucoup plus lente. Ne pas charger la pile de lemme utilisé par auto, sinon catastrophe lors de l'utilisation des tactiques proofmode.
  -- Pas très élégant d'instancier une heap dans certains cas pour sortir de proofmode, progresser et retourner dans proofmode. (Lemma instance_heap)
     Possibilité ?: créer une tactique qui permet d'avancer d'une étape ?
  -- Clarifier comment sortir de iProp. Pour le moment tr_top s'en occupe et c'est pas dégueu mais est-ce la méthode classique ? ([exists tmp, ... tmp]).



BUG : Si je retourne en arrière dans la preuve, la preuve bug completement et affiche le message "The reference Backtrack is not found in the current environment".
      Apparait depuis le passage à coq.8.11.dev. Disparait lorsqu'on retourne en coq.10.2 avec (coq-iris.dev.2020-03-27.1 et coq-stdpp.dev.2020-03-18.1)
